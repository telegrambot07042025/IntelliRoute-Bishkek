import streamlit as st
import pandas as pd
import numpy as np
import osmnx as ox
import networkx as nx
import folium
from streamlit_folium import st_folium
import pickle
import requests
from datetime import datetime, time
import os

# ==============================================================================
# 1. –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´ –ò –ó–ê–ì–†–£–ó–ö–ê –ê–†–¢–ï–§–ê–ö–¢–û–í
# ==============================================================================

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="IntelliRoute Bishkek",
    page_icon="üó∫Ô∏è",
    layout="wide"
)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –º–æ–¥–µ–ª–∏ –∏ –≥—Ä–∞—Ñ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@st.cache_resource
def load_artifacts():
    # –í–∞–∂–Ω–æ: –í Streamlit Cloud –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
    graph_filepath = "datasets/bishkek_drive_graph.graphml"
    models_filepath = "traffic_models.pkl"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã
    if not os.path.exists(graph_filepath) or not os.path.exists(models_filepath):
        st.error("–û—à–∏–±–∫–∞: –§–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π –∏–ª–∏ –≥—Ä–∞—Ñ–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.")
        return None, None
        
    G_bishkek = ox.load_graphml(graph_filepath)
    with open(models_filepath, 'rb') as f:
        models = pickle.load(f)
    return G_bishkek, models

# --- Backend-—Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ø—á–µ–π–∫–∏ 3 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# ... (–∑–¥–µ—Å—å –º—ã —Å–∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ get_weather_forecast, prepare_inference_data, –∏ —Ç.–¥.) ...
def get_weather_forecast(api_key, lat, lon, target_datetime):
    logging.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {target_datetime}...")
    try:
        url = f"http://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={api_key}&units=metric"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        forecasts = data['list']
        closest_forecast = min(forecasts, key=lambda x: abs(target_datetime.timestamp() - x['dt']))
        weather_data = {
            'temp': closest_forecast['main'].get('temp', 0),
            'rhum': closest_forecast['main'].get('humidity', 0),
            'wspd': closest_forecast['wind'].get('speed', 0),
            'prcp': closest_forecast.get('rain', {}).get('3h', 0) / 3,
            'snow': closest_forecast.get('snow', {}).get('3h', 0) / 3,
        }
        logging.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ–ª—É—á–µ–Ω: {weather_data}")
        return weather_data
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return {'temp': 15, 'rhum': 50, 'wspd': 5, 'prcp': 0, 'snow': 0}

# --- –§—É–Ω–∫—Ü–∏—è 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ê) ---
def prepare_inference_data(graph, target_datetime, weather_data):
    logging.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±—Ä–∞ –≥—Ä–∞—Ñ–∞...")
    edges_df = ox.graph_to_gdfs(graph, nodes=False)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    edges_df['hour'] = target_datetime.hour
    edges_df['weekday'] = target_datetime.weekday()
    edges_df['month'] = target_datetime.month
    edges_df['is_weekend'] = (edges_df['weekday'] >= 5).astype(int)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    for key, value in weather_data.items():
        edges_df[key] = value
        
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö ---
    # –°–æ–∑–¥–∞–µ–º "—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏" –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç X –∏ Y –¥–ª—è –≤—Å–µ—Ö —É–∑–ª–æ–≤ –≥—Ä–∞—Ñ–∞
    nodes_df = ox.graph_to_gdfs(graph, edges=False)
    x_coords = nodes_df['x']
    y_coords = nodes_df['y']
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º .map() –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    edges_df['pickup_longitude'] = edges_df.index.get_level_values('u').map(x_coords)
    edges_df['pickup_latitude'] = edges_df.index.get_level_values('u').map(y_coords)
    edges_df['dropoff_longitude'] = edges_df.index.get_level_values('v').map(x_coords)
    edges_df['dropoff_latitude'] = edges_df.index.get_level_values('v').map(y_coords)
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---
    
    edges_df.rename(columns={'length': 'distance_m'}, inplace=True)
    edges_df['distance_km'] = edges_df['distance_m'] / 1000.0

    edges_df['vendor_id'] = 1
    edges_df['passenger_count'] = 1
    
    features_cols = [
        'vendor_id', 'passenger_count', 'pickup_longitude', 'pickup_latitude',
        'dropoff_longitude', 'dropoff_latitude', 'hour', 'weekday', 'month',
        'is_weekend', 'distance_km', 'temp', 'rhum', 'prcp', 'snow', 'wspd'
    ]
    return edges_df[features_cols]

# --- –§—É–Ω–∫—Ü–∏–∏ 3, 4, 5 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def get_predictions(models, features_df):
    logging.info("–ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –º–æ–¥–µ–ª–µ–π...")
    preds_median_log = models['q_0.5'].predict(features_df)
    preds_upper_log = models['q_0.9'].predict(features_df)
    time_per_km_median = np.expm1(preds_median_log)
    time_per_km_upper = np.expm1(preds_upper_log)
    return time_per_km_median, time_per_km_upper

def calculate_edge_costs(features_df, preds_median, preds_upper, strategy):
    logging.info(f"–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy}")
    travel_time_median = features_df['distance_km'] * preds_median
    travel_time_upper = features_df['distance_km'] * preds_upper
    if strategy == 'fastest':
        costs = travel_time_median
    else: # 'eco'
        smoothness_penalty = travel_time_upper - travel_time_median
        costs = travel_time_median + smoothness_penalty
    return costs, travel_time_median, travel_time_upper

def find_route(graph, start_coords, end_coords, attr_name='cost'):
    logging.info(f"–ò—â–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç {start_coords} –¥–æ {end_coords}")
    start_node = ox.nearest_nodes(graph, Y=start_coords[0], X=start_coords[1])
    end_node = ox.nearest_nodes(graph, Y=end_coords[0], X=end_coords[1])
    try:
        route = nx.shortest_path(graph, source=start_node, target=end_node, weight=attr_name)
        logging.info(f"–ú–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω. –°–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(route)} —É–∑–ª–æ–≤.")
        return route
    except nx.NetworkXNoPath:
        logging.error("–ú–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None


# ==============================================================================
# 2. –ò–ù–¢–ï–†–§–ï–ô–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (UI)
# ==============================================================================

st.title("IntelliRoute: –í–∞—à –£–º–Ω—ã–π –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –ë–∏—à–∫–µ–∫—É üó∫Ô∏è")
st.markdown("–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ–µ–∑–¥–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–æ–∫! –ú–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏, –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –ø–æ–≥–æ–¥—ã.")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
G_bishkek, models = load_artifacts()

if G_bishkek is None or models is None:
    st.stop() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å

# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–µ–∑–¥–∫–∏")
    
    with st.form("trip_form"):
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        start_lat = st.number_input("–®–∏—Ä–æ—Ç–∞ —Å—Ç–∞—Ä—Ç–∞:", value=42.8759, format="%.4f")
        start_lon = st.number_input("–î–æ–ª–≥–æ—Ç–∞ —Å—Ç–∞—Ä—Ç–∞:", value=74.5885, format="%.4f")
        end_lat = st.number_input("–®–∏—Ä–æ—Ç–∞ —Ñ–∏–Ω–∏—à–∞:", value=42.8781, format="%.4f")
        end_lon = st.number_input("–î–æ–ª–≥–æ—Ç–∞ —Ñ–∏–Ω–∏—à–∞:", value=74.6133, format="%.4f")
        
        # –í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        arrival_date = st.date_input("–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:", value=datetime.now())
        arrival_time = st.time_input("–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:", value=time(10, 0))
        
        # –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", ('fastest', 'eco'), captions=["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ", "–°—ç–∫–æ–Ω–æ–º–∏—Ç—å —Ç–æ–ø–ª–∏–≤–æ / –ï—Ö–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–µ–µ"])
        
        # –ö–ª—é—á API (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–∫—Ä–µ—Ç—ã Streamlit)
        api_key = st.text_input("–í–∞—à API –∫–ª—é—á –æ—Ç OpenWeatherMap:", type="password", help="–ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ openweathermap.org")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        submitted = st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")

# ==============================================================================
# 3. –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê –ò –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–ê
# ==============================================================================

with col2:
    st.subheader("üìç –ö–∞—Ä—Ç–∞ –∏ –†–µ–∑—É–ª—å—Ç–∞—Ç")
    
    # –°–æ–∑–¥–∞–µ–º "–ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ" –¥–ª—è –∫–∞—Ä—Ç—ã
    map_container = st.container()
    
    with map_container:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É –ë–∏—à–∫–µ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        m = folium.Map(location=[42.87, 74.6], zoom_start=13, tiles="cartodbpositron")
        st_folium(m, height=450, use_container_width=True)

if submitted:
    if not api_key:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç OpenWeatherMap.")
    else:
        with st.spinner('üß† –î—É–º–∞—é... –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é —Ç—Ä–∞—Ñ–∏–∫ –∏ –∏—â—É –ª—É—á—à–∏–π –ø—É—Ç—å...'):
            # --- –ó–∞–ø—É—Å–∫ –≤—Å–µ–π Backend-–ª–æ–≥–∏–∫–∏ ---
            arrival_datetime = datetime.combine(arrival_date, arrival_time)
            
            weather = get_weather_forecast(api_key, start_lat, start_lon, arrival_datetime)
            features = prepare_inference_data(G_bishkek, arrival_datetime, weather)
            preds_med, preds_up = get_predictions(models, features)
            costs, travel_time_med, travel_time_up = calculate_edge_costs(features, preds_med, preds_up, strategy)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –≥—Ä–∞—Ñ–∞
            costs_dict = costs.to_dict()
            time_median_dict = travel_time_med.to_dict()
            time_upper_dict = travel_time_up.to_dict()
            nx.set_edge_attributes(G_bishkek, values=costs_dict, name='cost')
            nx.set_edge_attributes(G_bishkek, values=time_median_dict, name='time_median')
            nx.set_edge_attributes(G_bishkek, values=time_upper_dict, name='time_upper')
            
            route_nodes = find_route(G_bishkek, (start_lat, start_lon), (end_lat, end_lon), attr_name='cost')

            if route_nodes:
                # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
                path_edges = list(zip(route_nodes, route_nodes[1:]))
                total_time_median = sum(G_bishkek.get_edge_data(u, v)[0]['time_median'] for u, v in path_edges)
                total_time_upper = sum(G_bishkek.get_edge_data(u, v)[0]['time_upper'] for u, v in path_edges)
                departure_time = arrival_datetime - pd.to_timedelta(total_time_upper, unit='s')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                with col1:
                    st.success("‚úÖ –í–∞—à –º–∞—Ä—à—Ä—É—Ç –≥–æ—Ç–æ–≤!")
                    st.metric("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞:", departure_time.strftime('%H:%M'))
                    st.metric("–ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏ (–º–∏–Ω—É—Ç):", f"{total_time_median/60:.0f} - {total_time_upper/60:.0f}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                with map_container:
                    route_map = ox.plot_route_folium(G_bishkek, route_nodes, tiles='cartodbpositron')
                    folium.Marker(location=[start_lat, start_lon], popup="–°—Ç–∞—Ä—Ç", icon=folium.Icon(color='green')).add_to(route_map)
                    folium.Marker(location=[end_lat, end_lon], popup="–§–∏–Ω–∏—à", icon=folium.Icon(color='red')).add_to(route_map)
                    st_folium(route_map, height=450, use_container_width=True)
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏.")
